// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(livekit_uniffiFFI)
import livekit_uniffiFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_livekit_uniffi_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_livekit_uniffi_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureLivekitUniffiInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
// Initial value and increment amount for handles. 
// These ensure that SWIFT handles always have the lowest bit set
fileprivate let UNIFFI_HANDLEMAP_INITIAL: UInt64 = 1
fileprivate let UNIFFI_HANDLEMAP_DELTA: UInt64 = 2

fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = UNIFFI_HANDLEMAP_INITIAL

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            return doInsert(obj)
        }
    }

    // Low-level insert function, this assumes `lock` is held.
    private func doInsert(_ obj: T) -> UInt64 {
        let handle = currentHandle
        currentHandle += UNIFFI_HANDLEMAP_DELTA
        map[handle] = obj
        return handle
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

     func clone(handle: UInt64) throws -> UInt64 {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return doInsert(obj)
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterInt16: FfiConverterPrimitive {
    typealias FfiType = Int16
    typealias SwiftType = Int16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int16, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDuration: FfiConverterRustBuffer {
    typealias SwiftType = TimeInterval

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TimeInterval {
        let seconds: UInt64 = try readInt(&buf)
        let nanoseconds: UInt32 = try readInt(&buf)
        return Double(seconds) + (Double(nanoseconds) / 1.0e9)
    }

    public static func write(_ value: TimeInterval, into buf: inout [UInt8]) {
        if value.rounded(.down) > Double(Int64.max) {
            fatalError("Duration overflow, exceeds max bounds supported by Uniffi")
        }

        if value < 0 {
            fatalError("Invalid duration, must be non-negative")
        }

        let seconds = UInt64(value)
        let nanoseconds = UInt32((value - Double(seconds)) * 1.0e9)
        writeInt(&buf, seconds)
        writeInt(&buf, nanoseconds)
    }
}




public protocol ResamplerProtocol: AnyObject, Sendable {
    
    /**
     * Flush any remaining audio data through the resampler and retrieve the resampled data.
     *
     * This method should be called when no more input data will be provided to ensure that all
     * internal buffers are processed and all resampled data is output.

     */
    func flush() throws  -> [Int16]
    
    /**
     * Push audio data into the resampler and retrieve any available resampled data.
     *
     * This method accepts audio data, resamples it according to the configured input
     * and output rates, and returns any resampled data that is available after processing the input.

     */
    func push(input: [Int16]) throws  -> [Int16]
    
}
open class Resampler: ResamplerProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_livekit_uniffi_fn_clone_resampler(self.handle, $0) }
    }
    /**
     * Creates a new audio resampler with the given settings.
     */
public convenience init(settings: ResamplerSettings)throws  {
    let handle =
        try rustCallWithError(FfiConverterTypeResamplerError_lift) {
    uniffi_livekit_uniffi_fn_constructor_resampler_new(
        FfiConverterTypeResamplerSettings_lower(settings),$0
    )
}
    self.init(unsafeFromHandle: handle)
}

    deinit {
        try! rustCall { uniffi_livekit_uniffi_fn_free_resampler(handle, $0) }
    }

    

    
    /**
     * Flush any remaining audio data through the resampler and retrieve the resampled data.
     *
     * This method should be called when no more input data will be provided to ensure that all
     * internal buffers are processed and all resampled data is output.

     */
open func flush()throws  -> [Int16]  {
    return try  FfiConverterSequenceInt16.lift(try rustCallWithError(FfiConverterTypeResamplerError_lift) {
    uniffi_livekit_uniffi_fn_method_resampler_flush(
            self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Push audio data into the resampler and retrieve any available resampled data.
     *
     * This method accepts audio data, resamples it according to the configured input
     * and output rates, and returns any resampled data that is available after processing the input.

     */
open func push(input: [Int16])throws  -> [Int16]  {
    return try  FfiConverterSequenceInt16.lift(try rustCallWithError(FfiConverterTypeResamplerError_lift) {
    uniffi_livekit_uniffi_fn_method_resampler_push(
            self.uniffiCloneHandle(),
        FfiConverterSequenceInt16.lower(input),$0
    )
})
}
    

    
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeResampler: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = Resampler

    public static func lift(_ handle: UInt64) throws -> Resampler {
        return Resampler(unsafeFromHandle: handle)
    }

    public static func lower(_ value: Resampler) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Resampler {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: Resampler, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeResampler_lift(_ handle: UInt64) throws -> Resampler {
    return try FfiConverterTypeResampler.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeResampler_lower(_ value: Resampler) -> UInt64 {
    return FfiConverterTypeResampler.lower(value)
}




/**
 * API credentials for access token generation and verification.
 */
public struct ApiCredentials: Equatable, Hashable {
    public var key: String
    public var secret: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(key: String, secret: String) {
        self.key = key
        self.secret = secret
    }

    
}

#if compiler(>=6)
extension ApiCredentials: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeApiCredentials: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ApiCredentials {
        return
            try ApiCredentials(
                key: FfiConverterString.read(from: &buf), 
                secret: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: ApiCredentials, into buf: inout [UInt8]) {
        FfiConverterString.write(value.key, into: &buf)
        FfiConverterString.write(value.secret, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeApiCredentials_lift(_ buf: RustBuffer) throws -> ApiCredentials {
    return try FfiConverterTypeApiCredentials.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeApiCredentials_lower(_ value: ApiCredentials) -> RustBuffer {
    return FfiConverterTypeApiCredentials.lower(value)
}


/**
 * Claims decoded from a valid access token.
 */
public struct Claims: Equatable, Hashable {
    public var exp: UInt64
    public var iss: String
    public var nbf: UInt64
    public var sub: String
    public var name: String
    public var video: VideoGrants
    public var sip: SipGrants
    public var sha256: String
    public var metadata: String
    public var attributes: [String: String]
    public var roomName: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(exp: UInt64, iss: String, nbf: UInt64, sub: String, name: String, video: VideoGrants, sip: SipGrants, sha256: String, metadata: String, attributes: [String: String], roomName: String) {
        self.exp = exp
        self.iss = iss
        self.nbf = nbf
        self.sub = sub
        self.name = name
        self.video = video
        self.sip = sip
        self.sha256 = sha256
        self.metadata = metadata
        self.attributes = attributes
        self.roomName = roomName
    }

    
}

#if compiler(>=6)
extension Claims: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeClaims: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Claims {
        return
            try Claims(
                exp: FfiConverterUInt64.read(from: &buf), 
                iss: FfiConverterString.read(from: &buf), 
                nbf: FfiConverterUInt64.read(from: &buf), 
                sub: FfiConverterString.read(from: &buf), 
                name: FfiConverterString.read(from: &buf), 
                video: FfiConverterTypeVideoGrants.read(from: &buf), 
                sip: FfiConverterTypeSIPGrants.read(from: &buf), 
                sha256: FfiConverterString.read(from: &buf), 
                metadata: FfiConverterString.read(from: &buf), 
                attributes: FfiConverterDictionaryStringString.read(from: &buf), 
                roomName: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: Claims, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.exp, into: &buf)
        FfiConverterString.write(value.iss, into: &buf)
        FfiConverterUInt64.write(value.nbf, into: &buf)
        FfiConverterString.write(value.sub, into: &buf)
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterTypeVideoGrants.write(value.video, into: &buf)
        FfiConverterTypeSIPGrants.write(value.sip, into: &buf)
        FfiConverterString.write(value.sha256, into: &buf)
        FfiConverterString.write(value.metadata, into: &buf)
        FfiConverterDictionaryStringString.write(value.attributes, into: &buf)
        FfiConverterString.write(value.roomName, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeClaims_lift(_ buf: RustBuffer) throws -> Claims {
    return try FfiConverterTypeClaims.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeClaims_lower(_ value: Claims) -> RustBuffer {
    return FfiConverterTypeClaims.lower(value)
}


public struct LogForwardEntry: Equatable, Hashable {
    public var level: LogForwardLevel
    public var target: String
    public var file: String?
    public var line: UInt32?
    public var message: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(level: LogForwardLevel, target: String, file: String?, line: UInt32?, message: String) {
        self.level = level
        self.target = target
        self.file = file
        self.line = line
        self.message = message
    }

    
}

#if compiler(>=6)
extension LogForwardEntry: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLogForwardEntry: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LogForwardEntry {
        return
            try LogForwardEntry(
                level: FfiConverterTypeLogForwardLevel.read(from: &buf), 
                target: FfiConverterString.read(from: &buf), 
                file: FfiConverterOptionString.read(from: &buf), 
                line: FfiConverterOptionUInt32.read(from: &buf), 
                message: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: LogForwardEntry, into buf: inout [UInt8]) {
        FfiConverterTypeLogForwardLevel.write(value.level, into: &buf)
        FfiConverterString.write(value.target, into: &buf)
        FfiConverterOptionString.write(value.file, into: &buf)
        FfiConverterOptionUInt32.write(value.line, into: &buf)
        FfiConverterString.write(value.message, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLogForwardEntry_lift(_ buf: RustBuffer) throws -> LogForwardEntry {
    return try FfiConverterTypeLogForwardEntry.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLogForwardEntry_lower(_ value: LogForwardEntry) -> RustBuffer {
    return FfiConverterTypeLogForwardEntry.lower(value)
}


public struct ResamplerSettings: Equatable, Hashable {
    public var inputRate: Double
    public var outputRate: Double
    public var numChannels: UInt32
    public var quality: ResamplerQuality

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(inputRate: Double, outputRate: Double, numChannels: UInt32, quality: ResamplerQuality) {
        self.inputRate = inputRate
        self.outputRate = outputRate
        self.numChannels = numChannels
        self.quality = quality
    }

    
}

#if compiler(>=6)
extension ResamplerSettings: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeResamplerSettings: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ResamplerSettings {
        return
            try ResamplerSettings(
                inputRate: FfiConverterDouble.read(from: &buf), 
                outputRate: FfiConverterDouble.read(from: &buf), 
                numChannels: FfiConverterUInt32.read(from: &buf), 
                quality: FfiConverterTypeResamplerQuality.read(from: &buf)
        )
    }

    public static func write(_ value: ResamplerSettings, into buf: inout [UInt8]) {
        FfiConverterDouble.write(value.inputRate, into: &buf)
        FfiConverterDouble.write(value.outputRate, into: &buf)
        FfiConverterUInt32.write(value.numChannels, into: &buf)
        FfiConverterTypeResamplerQuality.write(value.quality, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeResamplerSettings_lift(_ buf: RustBuffer) throws -> ResamplerSettings {
    return try FfiConverterTypeResamplerSettings.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeResamplerSettings_lower(_ value: ResamplerSettings) -> RustBuffer {
    return FfiConverterTypeResamplerSettings.lower(value)
}


/**
 * SIP grants
 *
 * Maps to the JWT's `sip` field.

 */
public struct SipGrants: Equatable, Hashable {
    public var admin: Bool
    public var call: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(admin: Bool, call: Bool) {
        self.admin = admin
        self.call = call
    }

    
}

#if compiler(>=6)
extension SipGrants: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSIPGrants: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SipGrants {
        return
            try SipGrants(
                admin: FfiConverterBool.read(from: &buf), 
                call: FfiConverterBool.read(from: &buf)
        )
    }

    public static func write(_ value: SipGrants, into buf: inout [UInt8]) {
        FfiConverterBool.write(value.admin, into: &buf)
        FfiConverterBool.write(value.call, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSIPGrants_lift(_ buf: RustBuffer) throws -> SipGrants {
    return try FfiConverterTypeSIPGrants.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSIPGrants_lower(_ value: SipGrants) -> RustBuffer {
    return FfiConverterTypeSIPGrants.lower(value)
}


/**
 * Options used for generating an access token.
 *
 * Any fields left empty will use the token generator's defaults.

 */
public struct TokenOptions: Equatable, Hashable {
    public var ttl: TimeInterval?
    public var videoGrants: VideoGrants?
    public var sipGrants: SipGrants?
    public var identity: String?
    public var name: String?
    public var metadata: String?
    public var attributes: [String: String]?
    public var sha256: String?
    public var roomName: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(ttl: TimeInterval? = nil, videoGrants: VideoGrants? = nil, sipGrants: SipGrants? = nil, identity: String? = nil, name: String? = nil, metadata: String? = nil, attributes: [String: String]? = nil, sha256: String? = nil, roomName: String? = nil) {
        self.ttl = ttl
        self.videoGrants = videoGrants
        self.sipGrants = sipGrants
        self.identity = identity
        self.name = name
        self.metadata = metadata
        self.attributes = attributes
        self.sha256 = sha256
        self.roomName = roomName
    }

    
}

#if compiler(>=6)
extension TokenOptions: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTokenOptions: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TokenOptions {
        return
            try TokenOptions(
                ttl: FfiConverterOptionDuration.read(from: &buf), 
                videoGrants: FfiConverterOptionTypeVideoGrants.read(from: &buf), 
                sipGrants: FfiConverterOptionTypeSIPGrants.read(from: &buf), 
                identity: FfiConverterOptionString.read(from: &buf), 
                name: FfiConverterOptionString.read(from: &buf), 
                metadata: FfiConverterOptionString.read(from: &buf), 
                attributes: FfiConverterOptionDictionaryStringString.read(from: &buf), 
                sha256: FfiConverterOptionString.read(from: &buf), 
                roomName: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: TokenOptions, into buf: inout [UInt8]) {
        FfiConverterOptionDuration.write(value.ttl, into: &buf)
        FfiConverterOptionTypeVideoGrants.write(value.videoGrants, into: &buf)
        FfiConverterOptionTypeSIPGrants.write(value.sipGrants, into: &buf)
        FfiConverterOptionString.write(value.identity, into: &buf)
        FfiConverterOptionString.write(value.name, into: &buf)
        FfiConverterOptionString.write(value.metadata, into: &buf)
        FfiConverterOptionDictionaryStringString.write(value.attributes, into: &buf)
        FfiConverterOptionString.write(value.sha256, into: &buf)
        FfiConverterOptionString.write(value.roomName, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTokenOptions_lift(_ buf: RustBuffer) throws -> TokenOptions {
    return try FfiConverterTypeTokenOptions.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTokenOptions_lower(_ value: TokenOptions) -> RustBuffer {
    return FfiConverterTypeTokenOptions.lower(value)
}


/**
 * Room permissions
 *
 * Maps to the JWT's `video` field.
 */
public struct VideoGrants: Equatable, Hashable {
    public var roomCreate: Bool
    public var roomList: Bool
    public var roomRecord: Bool
    public var roomAdmin: Bool
    public var roomJoin: Bool
    public var room: String
    public var destinationRoom: String
    public var canPublish: Bool
    public var canSubscribe: Bool
    public var canPublishData: Bool
    public var canPublishSources: [String]
    public var canUpdateOwnMetadata: Bool
    public var ingressAdmin: Bool
    public var hidden: Bool
    public var recorder: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(roomCreate: Bool, roomList: Bool, roomRecord: Bool, roomAdmin: Bool, roomJoin: Bool, room: String, destinationRoom: String, canPublish: Bool, canSubscribe: Bool, canPublishData: Bool, canPublishSources: [String], canUpdateOwnMetadata: Bool, ingressAdmin: Bool, hidden: Bool, recorder: Bool) {
        self.roomCreate = roomCreate
        self.roomList = roomList
        self.roomRecord = roomRecord
        self.roomAdmin = roomAdmin
        self.roomJoin = roomJoin
        self.room = room
        self.destinationRoom = destinationRoom
        self.canPublish = canPublish
        self.canSubscribe = canSubscribe
        self.canPublishData = canPublishData
        self.canPublishSources = canPublishSources
        self.canUpdateOwnMetadata = canUpdateOwnMetadata
        self.ingressAdmin = ingressAdmin
        self.hidden = hidden
        self.recorder = recorder
    }

    
}

#if compiler(>=6)
extension VideoGrants: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeVideoGrants: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VideoGrants {
        return
            try VideoGrants(
                roomCreate: FfiConverterBool.read(from: &buf), 
                roomList: FfiConverterBool.read(from: &buf), 
                roomRecord: FfiConverterBool.read(from: &buf), 
                roomAdmin: FfiConverterBool.read(from: &buf), 
                roomJoin: FfiConverterBool.read(from: &buf), 
                room: FfiConverterString.read(from: &buf), 
                destinationRoom: FfiConverterString.read(from: &buf), 
                canPublish: FfiConverterBool.read(from: &buf), 
                canSubscribe: FfiConverterBool.read(from: &buf), 
                canPublishData: FfiConverterBool.read(from: &buf), 
                canPublishSources: FfiConverterSequenceString.read(from: &buf), 
                canUpdateOwnMetadata: FfiConverterBool.read(from: &buf), 
                ingressAdmin: FfiConverterBool.read(from: &buf), 
                hidden: FfiConverterBool.read(from: &buf), 
                recorder: FfiConverterBool.read(from: &buf)
        )
    }

    public static func write(_ value: VideoGrants, into buf: inout [UInt8]) {
        FfiConverterBool.write(value.roomCreate, into: &buf)
        FfiConverterBool.write(value.roomList, into: &buf)
        FfiConverterBool.write(value.roomRecord, into: &buf)
        FfiConverterBool.write(value.roomAdmin, into: &buf)
        FfiConverterBool.write(value.roomJoin, into: &buf)
        FfiConverterString.write(value.room, into: &buf)
        FfiConverterString.write(value.destinationRoom, into: &buf)
        FfiConverterBool.write(value.canPublish, into: &buf)
        FfiConverterBool.write(value.canSubscribe, into: &buf)
        FfiConverterBool.write(value.canPublishData, into: &buf)
        FfiConverterSequenceString.write(value.canPublishSources, into: &buf)
        FfiConverterBool.write(value.canUpdateOwnMetadata, into: &buf)
        FfiConverterBool.write(value.ingressAdmin, into: &buf)
        FfiConverterBool.write(value.hidden, into: &buf)
        FfiConverterBool.write(value.recorder, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVideoGrants_lift(_ buf: RustBuffer) throws -> VideoGrants {
    return try FfiConverterTypeVideoGrants.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVideoGrants_lower(_ value: VideoGrants) -> RustBuffer {
    return FfiConverterTypeVideoGrants.lower(value)
}


/**
 * An error that can occur during token generation or verification.
 */
public enum AccessTokenError: Swift.Error, Equatable, Hashable, Foundation.LocalizedError {

    
    
    case InvalidKeys(message: String)
    
    case InvalidEnv(message: String)
    
    case InvalidClaims(message: String)
    
    case Encoding(message: String)
    

    

    
    public var errorDescription: String? {
        String(reflecting: self)
    }
    
}

#if compiler(>=6)
extension AccessTokenError: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAccessTokenError: FfiConverterRustBuffer {
    typealias SwiftType = AccessTokenError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AccessTokenError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidKeys(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .InvalidEnv(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .InvalidClaims(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .Encoding(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AccessTokenError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .InvalidKeys(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .InvalidEnv(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .InvalidClaims(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .Encoding(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))

        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAccessTokenError_lift(_ buf: RustBuffer) throws -> AccessTokenError {
    return try FfiConverterTypeAccessTokenError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAccessTokenError_lower(_ value: AccessTokenError) -> RustBuffer {
    return FfiConverterTypeAccessTokenError.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum LogForwardFilter: Equatable, Hashable {
    
    case off
    case error
    case warn
    case info
    case debug
    case trace



}

#if compiler(>=6)
extension LogForwardFilter: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLogForwardFilter: FfiConverterRustBuffer {
    typealias SwiftType = LogForwardFilter

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LogForwardFilter {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .off
        
        case 2: return .error
        
        case 3: return .warn
        
        case 4: return .info
        
        case 5: return .debug
        
        case 6: return .trace
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LogForwardFilter, into buf: inout [UInt8]) {
        switch value {
        
        
        case .off:
            writeInt(&buf, Int32(1))
        
        
        case .error:
            writeInt(&buf, Int32(2))
        
        
        case .warn:
            writeInt(&buf, Int32(3))
        
        
        case .info:
            writeInt(&buf, Int32(4))
        
        
        case .debug:
            writeInt(&buf, Int32(5))
        
        
        case .trace:
            writeInt(&buf, Int32(6))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLogForwardFilter_lift(_ buf: RustBuffer) throws -> LogForwardFilter {
    return try FfiConverterTypeLogForwardFilter.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLogForwardFilter_lower(_ value: LogForwardFilter) -> RustBuffer {
    return FfiConverterTypeLogForwardFilter.lower(value)
}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum LogForwardLevel: Equatable, Hashable {
    
    case error
    case warn
    case info
    case debug
    case trace



}

#if compiler(>=6)
extension LogForwardLevel: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLogForwardLevel: FfiConverterRustBuffer {
    typealias SwiftType = LogForwardLevel

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LogForwardLevel {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .error
        
        case 2: return .warn
        
        case 3: return .info
        
        case 4: return .debug
        
        case 5: return .trace
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LogForwardLevel, into buf: inout [UInt8]) {
        switch value {
        
        
        case .error:
            writeInt(&buf, Int32(1))
        
        
        case .warn:
            writeInt(&buf, Int32(2))
        
        
        case .info:
            writeInt(&buf, Int32(3))
        
        
        case .debug:
            writeInt(&buf, Int32(4))
        
        
        case .trace:
            writeInt(&buf, Int32(5))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLogForwardLevel_lift(_ buf: RustBuffer) throws -> LogForwardLevel {
    return try FfiConverterTypeLogForwardLevel.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLogForwardLevel_lower(_ value: LogForwardLevel) -> RustBuffer {
    return FfiConverterTypeLogForwardLevel.lower(value)
}



public enum ResamplerError: Swift.Error, Equatable, Hashable, Foundation.LocalizedError {

    
    
    case Initialization(String
    )
    case OperationFailed(String
    )

    

    
    public var errorDescription: String? {
        String(reflecting: self)
    }
    
}

#if compiler(>=6)
extension ResamplerError: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeResamplerError: FfiConverterRustBuffer {
    typealias SwiftType = ResamplerError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ResamplerError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Initialization(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .OperationFailed(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ResamplerError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Initialization(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .OperationFailed(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeResamplerError_lift(_ buf: RustBuffer) throws -> ResamplerError {
    return try FfiConverterTypeResamplerError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeResamplerError_lower(_ value: ResamplerError) -> RustBuffer {
    return FfiConverterTypeResamplerError.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ResamplerQuality: Equatable, Hashable {
    
    case quick
    case low
    case medium
    case high
    case veryHigh



}

#if compiler(>=6)
extension ResamplerQuality: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeResamplerQuality: FfiConverterRustBuffer {
    typealias SwiftType = ResamplerQuality

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ResamplerQuality {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .quick
        
        case 2: return .low
        
        case 3: return .medium
        
        case 4: return .high
        
        case 5: return .veryHigh
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ResamplerQuality, into buf: inout [UInt8]) {
        switch value {
        
        
        case .quick:
            writeInt(&buf, Int32(1))
        
        
        case .low:
            writeInt(&buf, Int32(2))
        
        
        case .medium:
            writeInt(&buf, Int32(3))
        
        
        case .high:
            writeInt(&buf, Int32(4))
        
        
        case .veryHigh:
            writeInt(&buf, Int32(5))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeResamplerQuality_lift(_ buf: RustBuffer) throws -> ResamplerQuality {
    return try FfiConverterTypeResamplerQuality.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeResamplerQuality_lower(_ value: ResamplerQuality) -> RustBuffer {
    return FfiConverterTypeResamplerQuality.lower(value)
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt32: FfiConverterRustBuffer {
    typealias SwiftType = UInt32?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionDuration: FfiConverterRustBuffer {
    typealias SwiftType = TimeInterval?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDuration.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDuration.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeApiCredentials: FfiConverterRustBuffer {
    typealias SwiftType = ApiCredentials?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeApiCredentials.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeApiCredentials.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeLogForwardEntry: FfiConverterRustBuffer {
    typealias SwiftType = LogForwardEntry?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeLogForwardEntry.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeLogForwardEntry.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeSIPGrants: FfiConverterRustBuffer {
    typealias SwiftType = SipGrants?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeSIPGrants.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeSIPGrants.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeVideoGrants: FfiConverterRustBuffer {
    typealias SwiftType = VideoGrants?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeVideoGrants.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeVideoGrants.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionDictionaryStringString: FfiConverterRustBuffer {
    typealias SwiftType = [String: String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDictionaryStringString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDictionaryStringString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceInt16: FfiConverterRustBuffer {
    typealias SwiftType = [Int16]

    public static func write(_ value: [Int16], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterInt16.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Int16] {
        let len: Int32 = try readInt(&buf)
        var seq = [Int16]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterInt16.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDictionaryStringString: FfiConverterRustBuffer {
    public static func write(_ value: [String: String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterString.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: String] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: String]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterString.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}
private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_WAKE: Int8 = 1

fileprivate let uniffiContinuationHandleMap = UniffiHandleMap<UnsafeContinuation<Int8, Never>>()

fileprivate func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UInt64,
    pollFunc: (UInt64, @escaping UniffiRustFutureContinuationCallback, UInt64) -> (),
    completeFunc: (UInt64, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UInt64) -> (),
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Swift.Error)?
) async throws -> T {
    // Make sure to call the ensure init function since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureLivekitUniffiInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8;
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(
                rustFuture,
                { handle, pollResult in
                    uniffiFutureContinuationCallback(handle: handle, pollResult: pollResult)
                },
                uniffiContinuationHandleMap.insert(obj: $0)
            )
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
fileprivate func uniffiFutureContinuationCallback(handle: UInt64, pollResult: Int8) {
    if let continuation = try? uniffiContinuationHandleMap.remove(handle: handle) {
        continuation.resume(returning: pollResult)
    } else {
        print("uniffiFutureContinuationCallback invalid handle")
    }
}
/**
 * Returns the version specified in the crate's Cargo.toml.
 */
public func buildVersion() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_livekit_uniffi_fn_func_build_version($0
    )
})
}
/**
 * Generates an access token.
 *
 * If `credentials` are omitted, API key and secret will be read from the environment
 * variables `LIVEKIT_API_KEY` and `LIVEKIT_SECRET` respectively.

 */
public func generateToken(options: TokenOptions, credentials: ApiCredentials?)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeAccessTokenError_lift) {
    uniffi_livekit_uniffi_fn_func_generate_token(
        FfiConverterTypeTokenOptions_lower(options),
        FfiConverterOptionTypeApiCredentials.lower(credentials),$0
    )
})
}
/**
 * Bootstraps log forwarding.
 *
 * Generally, you will invoke this once early in program execution. However,
 * subsequent invocations are allowed to change the log level.

 */
public func logForwardBootstrap(level: LogForwardFilter)  {try! rustCall() {
    uniffi_livekit_uniffi_fn_func_log_forward_bootstrap(
        FfiConverterTypeLogForwardFilter_lower(level),$0
    )
}
}
/**
 * Asynchronously receives a forwarded log entry.
 *
 * Invoke repeatedly to receive log entries as they are produced
 * until `None` is returned, indicating forwarding has ended. Clients will
 * likely want to bridge this to the languages's equivalent of an asynchronous stream.

 */
public func logForwardReceive()async  -> LogForwardEntry?  {
    return
        try!  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_livekit_uniffi_fn_func_log_forward_receive(
                )
            },
            pollFunc: ffi_livekit_uniffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_livekit_uniffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_livekit_uniffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterOptionTypeLogForwardEntry.lift,
            errorHandler: nil
            
        )
}
/**
 * Verifies an access token.
 *
 * If `credentials` are omitted, API key and secret will be read from the environment
 * variables `LIVEKIT_API_KEY` and `LIVEKIT_SECRET` respectively.

 */
public func verifyToken(token: String, credentials: ApiCredentials?)throws  -> Claims  {
    return try  FfiConverterTypeClaims_lift(try rustCallWithError(FfiConverterTypeAccessTokenError_lift) {
    uniffi_livekit_uniffi_fn_func_verify_token(
        FfiConverterString.lower(token),
        FfiConverterOptionTypeApiCredentials.lower(credentials),$0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 30
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_livekit_uniffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_livekit_uniffi_checksum_func_build_version() != 45072) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_livekit_uniffi_checksum_func_generate_token() != 29823) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_livekit_uniffi_checksum_func_log_forward_bootstrap() != 28675) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_livekit_uniffi_checksum_func_log_forward_receive() != 7863) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_livekit_uniffi_checksum_func_verify_token() != 47517) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_livekit_uniffi_checksum_method_resampler_flush() != 32136) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_livekit_uniffi_checksum_method_resampler_push() != 59438) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_livekit_uniffi_checksum_constructor_resampler_new() != 65134) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureLivekitUniffiInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all