# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

from __future__ import annotations
import os
import sys
import ctypes
from dataclasses import dataclass
import enum
import struct
import contextlib
import datetime
import threading
import itertools
import traceback
import typing
import asyncio
import platform


# Used for default argument values
_DEFAULT = object() # type: typing.Any


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_uint64),
        ("len", ctypes.c_uint64),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def default():
        return _UniffiRustBuffer(0, 0, None)

    @staticmethod
    def alloc(size):
        return _uniffi_rust_call(_UniffiLib.ffi_livekit_uniffi_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _uniffi_rust_call(_UniffiLib.ffi_livekit_uniffi_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _uniffi_rust_call(_UniffiLib.ffi_livekit_uniffi_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError(f"junk data left in buffer at end of consume_with_stream {s.remaining()}")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError(f"junk data left in buffer at end of read_with_stream {s.remaining()}")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_UNEXPECTED_ERROR = 2

    @staticmethod
    def default():
        return _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer.default())

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
            return "_UniffiRustCallStatus(CALL_UNEXPECTED_ERROR)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _uniffi_rust_call(fn, *args):
    # Call a rust function
    return _uniffi_rust_call_with_error(None, fn, *args)

def _uniffi_rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus.default()

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_uniffi_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiFfiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

def _uniffi_trait_interface_call(call_status, make_call, write_return_value):
    try:
        return write_return_value(make_call())
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiFfiConverterString.lower(repr(e))

def _uniffi_trait_interface_call_with_error(call_status, make_call, write_return_value, error_type, lower_error):
    try:
        try:
            return write_return_value(make_call())
        except error_type as e:
            call_status.code = _UniffiRustCallStatus.CALL_ERROR
            call_status.error_buf = lower_error(e)
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiFfiConverterString.lower(repr(e))
# Initial value and increment amount for handles. 
# These ensure that Python-generated handles always have the lowest bit set
_UNIFFI_HANDLEMAP_INITIAL = 1
_UNIFFI_HANDLEMAP_DELTA = 2

class _UniffiHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._map = {}  # type: Dict[Handle, Any]
        self._lock = threading.Lock()
        self._counter = _UNIFFI_HANDLEMAP_INITIAL

    def insert(self, obj):
        with self._lock:
            return self._insert(obj)

    """Low-level insert, this assumes `self._lock` is held."""
    def _insert(self, obj):
        handle = self._counter
        self._counter += _UNIFFI_HANDLEMAP_DELTA
        self._map[handle] = obj
        return handle

    def get(self, handle):
        try:
            with self._lock:
                return self._map[handle]
        except KeyError:
            raise InternalError(f"_UniffiHandleMap.get: Invalid handle {handle}")

    def clone(self, handle):
        try:
            with self._lock:
                obj = self._map[handle]
                return self._insert(obj)
        except KeyError:
            raise InternalError(f"_UniffiHandleMap.clone: Invalid handle {handle}")

    def remove(self, handle):
        try:
            with self._lock:
                return self._map.pop(handle)
        except KeyError:
            raise InternalError(f"_UniffiHandleMap.remove: Invalid handle: {handle}")

    def __len__(self):
        return len(self._map)
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return value

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_uint64, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("livekit_uniffi")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 30
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_livekit_uniffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_livekit_uniffi_checksum_func_build_version() != 45072:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_livekit_uniffi_checksum_func_generate_token() != 29823:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_livekit_uniffi_checksum_func_log_forward_bootstrap() != 28675:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_livekit_uniffi_checksum_func_log_forward_receive() != 7863:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_livekit_uniffi_checksum_func_verify_token() != 47517:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
_UniffiLib.ffi_livekit_uniffi_rustbuffer_alloc.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_livekit_uniffi_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_livekit_uniffi_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_livekit_uniffi_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_livekit_uniffi_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_livekit_uniffi_rustbuffer_free.restype = None
_UniffiLib.ffi_livekit_uniffi_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_livekit_uniffi_rustbuffer_reserve.restype = _UniffiRustBuffer
_UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_int8,
)
_UNIFFI_FOREIGN_FUTURE_DROPPED_CALLBACK = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
class _UniffiForeignFutureDroppedCallbackStruct(ctypes.Structure):
    _fields_ = [
        ("handle", ctypes.c_uint64),
        ("free", _UNIFFI_FOREIGN_FUTURE_DROPPED_CALLBACK),
    ]
_UniffiLib.ffi_livekit_uniffi_rust_future_poll_u8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_poll_u8.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_cancel_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_complete_u8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_livekit_uniffi_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_livekit_uniffi_rust_future_free_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_free_u8.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_poll_i8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_poll_i8.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_cancel_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_complete_i8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_livekit_uniffi_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_livekit_uniffi_rust_future_free_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_free_i8.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_poll_u16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_poll_u16.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_cancel_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_complete_u16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_livekit_uniffi_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_livekit_uniffi_rust_future_free_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_free_u16.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_poll_i16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_poll_i16.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_cancel_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_complete_i16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_livekit_uniffi_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_livekit_uniffi_rust_future_free_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_free_i16.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_poll_u32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_poll_u32.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_cancel_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_complete_u32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_livekit_uniffi_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_livekit_uniffi_rust_future_free_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_free_u32.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_poll_i32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_poll_i32.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_cancel_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_complete_i32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_livekit_uniffi_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_livekit_uniffi_rust_future_free_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_free_i32.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_poll_u64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_poll_u64.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_cancel_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_complete_u64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_livekit_uniffi_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_livekit_uniffi_rust_future_free_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_free_u64.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_poll_i64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_poll_i64.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_cancel_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_complete_i64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_livekit_uniffi_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_livekit_uniffi_rust_future_free_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_free_i64.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_poll_f32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_poll_f32.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_cancel_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_complete_f32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_livekit_uniffi_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_livekit_uniffi_rust_future_free_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_free_f32.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_poll_f64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_poll_f64.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_cancel_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_complete_f64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_livekit_uniffi_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_livekit_uniffi_rust_future_free_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_free_f64.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_livekit_uniffi_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_livekit_uniffi_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_poll_void.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_poll_void.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_cancel_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_cancel_void.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_complete_void.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_livekit_uniffi_rust_future_complete_void.restype = None
_UniffiLib.ffi_livekit_uniffi_rust_future_free_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_livekit_uniffi_rust_future_free_void.restype = None
_UniffiLib.uniffi_livekit_uniffi_fn_func_build_version.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_livekit_uniffi_fn_func_build_version.restype = _UniffiRustBuffer
_UniffiLib.uniffi_livekit_uniffi_fn_func_generate_token.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_livekit_uniffi_fn_func_generate_token.restype = _UniffiRustBuffer
_UniffiLib.uniffi_livekit_uniffi_fn_func_log_forward_bootstrap.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_livekit_uniffi_fn_func_log_forward_bootstrap.restype = None
_UniffiLib.uniffi_livekit_uniffi_fn_func_log_forward_receive.argtypes = (
)
_UniffiLib.uniffi_livekit_uniffi_fn_func_log_forward_receive.restype = ctypes.c_uint64
_UniffiLib.uniffi_livekit_uniffi_fn_func_verify_token.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_livekit_uniffi_fn_func_verify_token.restype = _UniffiRustBuffer
_UniffiLib.ffi_livekit_uniffi_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_livekit_uniffi_uniffi_contract_version.restype = ctypes.c_uint32
_UniffiLib.uniffi_livekit_uniffi_checksum_func_build_version.argtypes = (
)
_UniffiLib.uniffi_livekit_uniffi_checksum_func_build_version.restype = ctypes.c_uint16
_UniffiLib.uniffi_livekit_uniffi_checksum_func_generate_token.argtypes = (
)
_UniffiLib.uniffi_livekit_uniffi_checksum_func_generate_token.restype = ctypes.c_uint16
_UniffiLib.uniffi_livekit_uniffi_checksum_func_log_forward_bootstrap.argtypes = (
)
_UniffiLib.uniffi_livekit_uniffi_checksum_func_log_forward_bootstrap.restype = ctypes.c_uint16
_UniffiLib.uniffi_livekit_uniffi_checksum_func_log_forward_receive.argtypes = (
)
_UniffiLib.uniffi_livekit_uniffi_checksum_func_log_forward_receive.restype = ctypes.c_uint16
_UniffiLib.uniffi_livekit_uniffi_checksum_func_verify_token.argtypes = (
)
_UniffiLib.uniffi_livekit_uniffi_checksum_func_verify_token.restype = ctypes.c_uint16

_uniffi_check_contract_api_version(_UniffiLib)
# _uniffi_check_api_checksums(_UniffiLib)

# RustFuturePoll values
_UNIFFI_RUST_FUTURE_POLL_READY = 0
_UNIFFI_RUST_FUTURE_POLL_WAKE = 1

# Stores futures for _uniffi_continuation_callback
_UniffiContinuationHandleMap = _UniffiHandleMap()

_UNIFFI_GLOBAL_EVENT_LOOP = None

"""
Set the event loop to use for async functions

This is needed if some async functions run outside of the eventloop, for example:
    - A non-eventloop thread is spawned, maybe from `EventLoop.run_in_executor` or maybe from the
      Rust code spawning its own thread.
    - The Rust code calls an async callback method from a sync callback function, using something
      like `pollster` to block on the async call.

In this case, we need an event loop to run the Python async function, but there's no eventloop set
for the thread.  Use `uniffi_set_event_loop` to force an eventloop to be used in this case.
"""
def uniffi_set_event_loop(eventloop: asyncio.BaseEventLoop):
    global _UNIFFI_GLOBAL_EVENT_LOOP
    _UNIFFI_GLOBAL_EVENT_LOOP = eventloop

def _uniffi_get_event_loop():
    if _UNIFFI_GLOBAL_EVENT_LOOP is not None:
        return _UNIFFI_GLOBAL_EVENT_LOOP
    else:
        return asyncio.get_running_loop()

# Continuation callback for async functions
# lift the return value or error and resolve the future, causing the async function to resume.
@_UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK
def _uniffi_continuation_callback(future_ptr, poll_code):
    (eventloop, future) = _UniffiContinuationHandleMap.remove(future_ptr)
    eventloop.call_soon_threadsafe(_uniffi_set_future_result, future, poll_code)

def _uniffi_set_future_result(future, poll_code):
    if not future.cancelled():
        future.set_result(poll_code)

async def _uniffi_rust_call_async(rust_future, ffi_poll, ffi_complete, ffi_free, lift_func, error_ffi_converter):
    try:
        eventloop = _uniffi_get_event_loop()

        # Loop and poll until we see a _UNIFFI_RUST_FUTURE_POLL_READY value
        while True:
            future = eventloop.create_future()
            ffi_poll(
                rust_future,
                _uniffi_continuation_callback,
                _UniffiContinuationHandleMap.insert((eventloop, future)),
            )
            poll_code = await future
            if poll_code == _UNIFFI_RUST_FUTURE_POLL_READY:
                break

        return lift_func(
            _uniffi_rust_call_with_error(error_ffi_converter, ffi_complete, rust_future)
        )
    finally:
        ffi_free(rust_future)

# Public interface members begin here.


class _UniffiFfiConverterString:
    @staticmethod
    def check_lower(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()

@dataclass
class ApiCredentials:
    """
    API credentials for access token generation and verification.
"""
    def __init__(self, *, key:str, secret:str):
        self.key = key
        self.secret = secret
        
        

    
    def __str__(self):
        return "ApiCredentials(key={}, secret={})".format(self.key, self.secret)
    def __eq__(self, other):
        if self.key != other.key:
            return False
        if self.secret != other.secret:
            return False
        return True

class _UniffiFfiConverterTypeApiCredentials(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ApiCredentials(
            key=_UniffiFfiConverterString.read(buf),
            secret=_UniffiFfiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiFfiConverterString.check_lower(value.key)
        _UniffiFfiConverterString.check_lower(value.secret)

    @staticmethod
    def write(value, buf):
        _UniffiFfiConverterString.write(value.key, buf)
        _UniffiFfiConverterString.write(value.secret, buf)

class _UniffiFfiConverterUInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u64"
    VALUE_MIN = 0
    VALUE_MAX = 2**64

    @staticmethod
    def read(buf):
        return buf.read_u64()

    @staticmethod
    def write(value, buf):
        buf.write_u64(value)

class _UniffiFfiConverterBoolean:
    @classmethod
    def check_lower(cls, value):
        return not not value

    @classmethod
    def lower(cls, value):
        return 1 if value else 0

    @staticmethod
    def lift(value):
        return value != 0

    @classmethod
    def read(cls, buf):
        return cls.lift(buf.read_u8())

    @classmethod
    def write(cls, value, buf):
        buf.write_u8(value)

class _UniffiFfiConverterSequenceString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiFfiConverterString.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiFfiConverterString.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiFfiConverterString.read(buf) for i in range(count)
        ]

@dataclass
class VideoGrants:
    """
    Room permissions

    Maps to the JWT's `video` field.
"""
    def __init__(self, *, room_create:bool, room_list:bool, room_record:bool, room_admin:bool, room_join:bool, room:str, destination_room:str, can_publish:bool, can_subscribe:bool, can_publish_data:bool, can_publish_sources:typing.List[str], can_update_own_metadata:bool, ingress_admin:bool, hidden:bool, recorder:bool):
        self.room_create = room_create
        self.room_list = room_list
        self.room_record = room_record
        self.room_admin = room_admin
        self.room_join = room_join
        self.room = room
        self.destination_room = destination_room
        self.can_publish = can_publish
        self.can_subscribe = can_subscribe
        self.can_publish_data = can_publish_data
        self.can_publish_sources = can_publish_sources
        self.can_update_own_metadata = can_update_own_metadata
        self.ingress_admin = ingress_admin
        self.hidden = hidden
        self.recorder = recorder
        
        

    
    def __str__(self):
        return "VideoGrants(room_create={}, room_list={}, room_record={}, room_admin={}, room_join={}, room={}, destination_room={}, can_publish={}, can_subscribe={}, can_publish_data={}, can_publish_sources={}, can_update_own_metadata={}, ingress_admin={}, hidden={}, recorder={})".format(self.room_create, self.room_list, self.room_record, self.room_admin, self.room_join, self.room, self.destination_room, self.can_publish, self.can_subscribe, self.can_publish_data, self.can_publish_sources, self.can_update_own_metadata, self.ingress_admin, self.hidden, self.recorder)
    def __eq__(self, other):
        if self.room_create != other.room_create:
            return False
        if self.room_list != other.room_list:
            return False
        if self.room_record != other.room_record:
            return False
        if self.room_admin != other.room_admin:
            return False
        if self.room_join != other.room_join:
            return False
        if self.room != other.room:
            return False
        if self.destination_room != other.destination_room:
            return False
        if self.can_publish != other.can_publish:
            return False
        if self.can_subscribe != other.can_subscribe:
            return False
        if self.can_publish_data != other.can_publish_data:
            return False
        if self.can_publish_sources != other.can_publish_sources:
            return False
        if self.can_update_own_metadata != other.can_update_own_metadata:
            return False
        if self.ingress_admin != other.ingress_admin:
            return False
        if self.hidden != other.hidden:
            return False
        if self.recorder != other.recorder:
            return False
        return True

class _UniffiFfiConverterTypeVideoGrants(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return VideoGrants(
            room_create=_UniffiFfiConverterBoolean.read(buf),
            room_list=_UniffiFfiConverterBoolean.read(buf),
            room_record=_UniffiFfiConverterBoolean.read(buf),
            room_admin=_UniffiFfiConverterBoolean.read(buf),
            room_join=_UniffiFfiConverterBoolean.read(buf),
            room=_UniffiFfiConverterString.read(buf),
            destination_room=_UniffiFfiConverterString.read(buf),
            can_publish=_UniffiFfiConverterBoolean.read(buf),
            can_subscribe=_UniffiFfiConverterBoolean.read(buf),
            can_publish_data=_UniffiFfiConverterBoolean.read(buf),
            can_publish_sources=_UniffiFfiConverterSequenceString.read(buf),
            can_update_own_metadata=_UniffiFfiConverterBoolean.read(buf),
            ingress_admin=_UniffiFfiConverterBoolean.read(buf),
            hidden=_UniffiFfiConverterBoolean.read(buf),
            recorder=_UniffiFfiConverterBoolean.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiFfiConverterBoolean.check_lower(value.room_create)
        _UniffiFfiConverterBoolean.check_lower(value.room_list)
        _UniffiFfiConverterBoolean.check_lower(value.room_record)
        _UniffiFfiConverterBoolean.check_lower(value.room_admin)
        _UniffiFfiConverterBoolean.check_lower(value.room_join)
        _UniffiFfiConverterString.check_lower(value.room)
        _UniffiFfiConverterString.check_lower(value.destination_room)
        _UniffiFfiConverterBoolean.check_lower(value.can_publish)
        _UniffiFfiConverterBoolean.check_lower(value.can_subscribe)
        _UniffiFfiConverterBoolean.check_lower(value.can_publish_data)
        _UniffiFfiConverterSequenceString.check_lower(value.can_publish_sources)
        _UniffiFfiConverterBoolean.check_lower(value.can_update_own_metadata)
        _UniffiFfiConverterBoolean.check_lower(value.ingress_admin)
        _UniffiFfiConverterBoolean.check_lower(value.hidden)
        _UniffiFfiConverterBoolean.check_lower(value.recorder)

    @staticmethod
    def write(value, buf):
        _UniffiFfiConverterBoolean.write(value.room_create, buf)
        _UniffiFfiConverterBoolean.write(value.room_list, buf)
        _UniffiFfiConverterBoolean.write(value.room_record, buf)
        _UniffiFfiConverterBoolean.write(value.room_admin, buf)
        _UniffiFfiConverterBoolean.write(value.room_join, buf)
        _UniffiFfiConverterString.write(value.room, buf)
        _UniffiFfiConverterString.write(value.destination_room, buf)
        _UniffiFfiConverterBoolean.write(value.can_publish, buf)
        _UniffiFfiConverterBoolean.write(value.can_subscribe, buf)
        _UniffiFfiConverterBoolean.write(value.can_publish_data, buf)
        _UniffiFfiConverterSequenceString.write(value.can_publish_sources, buf)
        _UniffiFfiConverterBoolean.write(value.can_update_own_metadata, buf)
        _UniffiFfiConverterBoolean.write(value.ingress_admin, buf)
        _UniffiFfiConverterBoolean.write(value.hidden, buf)
        _UniffiFfiConverterBoolean.write(value.recorder, buf)

@dataclass
class SipGrants:
    """
    SIP grants

    Maps to the JWT's `sip` field.

"""
    def __init__(self, *, admin:bool, call:bool):
        self.admin = admin
        self.call = call
        
        

    
    def __str__(self):
        return "SipGrants(admin={}, call={})".format(self.admin, self.call)
    def __eq__(self, other):
        if self.admin != other.admin:
            return False
        if self.call != other.call:
            return False
        return True

class _UniffiFfiConverterTypeSIPGrants(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return SipGrants(
            admin=_UniffiFfiConverterBoolean.read(buf),
            call=_UniffiFfiConverterBoolean.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiFfiConverterBoolean.check_lower(value.admin)
        _UniffiFfiConverterBoolean.check_lower(value.call)

    @staticmethod
    def write(value, buf):
        _UniffiFfiConverterBoolean.write(value.admin, buf)
        _UniffiFfiConverterBoolean.write(value.call, buf)

class _UniffiFfiConverterMapStringString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, items):
        for (key, value) in items.items():
            _UniffiFfiConverterString.check_lower(key)
            _UniffiFfiConverterString.check_lower(value)

    @classmethod
    def write(cls, items, buf):
        buf.write_i32(len(items))
        for (key, value) in items.items():
            _UniffiFfiConverterString.write(key, buf)
            _UniffiFfiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = _UniffiFfiConverterString.read(buf)
            val = _UniffiFfiConverterString.read(buf)
            d[key] = val
        return d

@dataclass
class Claims:
    """
    Claims decoded from a valid access token.
"""
    def __init__(self, *, exp:int, iss:str, nbf:int, sub:str, name:str, video:VideoGrants, sip:SipGrants, sha256:str, metadata:str, attributes:dict[str, str], room_name:str):
        self.exp = exp
        self.iss = iss
        self.nbf = nbf
        self.sub = sub
        self.name = name
        self.video = video
        self.sip = sip
        self.sha256 = sha256
        self.metadata = metadata
        self.attributes = attributes
        self.room_name = room_name
        
        

    
    def __str__(self):
        return "Claims(exp={}, iss={}, nbf={}, sub={}, name={}, video={}, sip={}, sha256={}, metadata={}, attributes={}, room_name={})".format(self.exp, self.iss, self.nbf, self.sub, self.name, self.video, self.sip, self.sha256, self.metadata, self.attributes, self.room_name)
    def __eq__(self, other):
        if self.exp != other.exp:
            return False
        if self.iss != other.iss:
            return False
        if self.nbf != other.nbf:
            return False
        if self.sub != other.sub:
            return False
        if self.name != other.name:
            return False
        if self.video != other.video:
            return False
        if self.sip != other.sip:
            return False
        if self.sha256 != other.sha256:
            return False
        if self.metadata != other.metadata:
            return False
        if self.attributes != other.attributes:
            return False
        if self.room_name != other.room_name:
            return False
        return True

class _UniffiFfiConverterTypeClaims(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Claims(
            exp=_UniffiFfiConverterUInt64.read(buf),
            iss=_UniffiFfiConverterString.read(buf),
            nbf=_UniffiFfiConverterUInt64.read(buf),
            sub=_UniffiFfiConverterString.read(buf),
            name=_UniffiFfiConverterString.read(buf),
            video=_UniffiFfiConverterTypeVideoGrants.read(buf),
            sip=_UniffiFfiConverterTypeSIPGrants.read(buf),
            sha256=_UniffiFfiConverterString.read(buf),
            metadata=_UniffiFfiConverterString.read(buf),
            attributes=_UniffiFfiConverterMapStringString.read(buf),
            room_name=_UniffiFfiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiFfiConverterUInt64.check_lower(value.exp)
        _UniffiFfiConverterString.check_lower(value.iss)
        _UniffiFfiConverterUInt64.check_lower(value.nbf)
        _UniffiFfiConverterString.check_lower(value.sub)
        _UniffiFfiConverterString.check_lower(value.name)
        _UniffiFfiConverterTypeVideoGrants.check_lower(value.video)
        _UniffiFfiConverterTypeSIPGrants.check_lower(value.sip)
        _UniffiFfiConverterString.check_lower(value.sha256)
        _UniffiFfiConverterString.check_lower(value.metadata)
        _UniffiFfiConverterMapStringString.check_lower(value.attributes)
        _UniffiFfiConverterString.check_lower(value.room_name)

    @staticmethod
    def write(value, buf):
        _UniffiFfiConverterUInt64.write(value.exp, buf)
        _UniffiFfiConverterString.write(value.iss, buf)
        _UniffiFfiConverterUInt64.write(value.nbf, buf)
        _UniffiFfiConverterString.write(value.sub, buf)
        _UniffiFfiConverterString.write(value.name, buf)
        _UniffiFfiConverterTypeVideoGrants.write(value.video, buf)
        _UniffiFfiConverterTypeSIPGrants.write(value.sip, buf)
        _UniffiFfiConverterString.write(value.sha256, buf)
        _UniffiFfiConverterString.write(value.metadata, buf)
        _UniffiFfiConverterMapStringString.write(value.attributes, buf)
        _UniffiFfiConverterString.write(value.room_name, buf)






class LogForwardLevel(enum.Enum):
    
    ERROR = 0
    
    WARN = 1
    
    INFO = 2
    
    DEBUG = 3
    
    TRACE = 4
    


class _UniffiFfiConverterTypeLogForwardLevel(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return LogForwardLevel.ERROR
        if variant == 2:
            return LogForwardLevel.WARN
        if variant == 3:
            return LogForwardLevel.INFO
        if variant == 4:
            return LogForwardLevel.DEBUG
        if variant == 5:
            return LogForwardLevel.TRACE
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == LogForwardLevel.ERROR:
            return
        if value == LogForwardLevel.WARN:
            return
        if value == LogForwardLevel.INFO:
            return
        if value == LogForwardLevel.DEBUG:
            return
        if value == LogForwardLevel.TRACE:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == LogForwardLevel.ERROR:
            buf.write_i32(1)
        if value == LogForwardLevel.WARN:
            buf.write_i32(2)
        if value == LogForwardLevel.INFO:
            buf.write_i32(3)
        if value == LogForwardLevel.DEBUG:
            buf.write_i32(4)
        if value == LogForwardLevel.TRACE:
            buf.write_i32(5)



class _UniffiFfiConverterOptionalString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiFfiConverterString.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiFfiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiFfiConverterString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")

class _UniffiFfiConverterUInt32(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u32"
    VALUE_MIN = 0
    VALUE_MAX = 2**32

    @staticmethod
    def read(buf):
        return buf.read_u32()

    @staticmethod
    def write(value, buf):
        buf.write_u32(value)

class _UniffiFfiConverterOptionalUInt32(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiFfiConverterUInt32.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiFfiConverterUInt32.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiFfiConverterUInt32.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")

@dataclass
class LogForwardEntry:
    def __init__(self, *, level:LogForwardLevel, target:str, file:typing.Optional[str], line:typing.Optional[int], message:str):
        self.level = level
        self.target = target
        self.file = file
        self.line = line
        self.message = message
        
        

    
    def __str__(self):
        return "LogForwardEntry(level={}, target={}, file={}, line={}, message={})".format(self.level, self.target, self.file, self.line, self.message)
    def __eq__(self, other):
        if self.level != other.level:
            return False
        if self.target != other.target:
            return False
        if self.file != other.file:
            return False
        if self.line != other.line:
            return False
        if self.message != other.message:
            return False
        return True

class _UniffiFfiConverterTypeLogForwardEntry(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return LogForwardEntry(
            level=_UniffiFfiConverterTypeLogForwardLevel.read(buf),
            target=_UniffiFfiConverterString.read(buf),
            file=_UniffiFfiConverterOptionalString.read(buf),
            line=_UniffiFfiConverterOptionalUInt32.read(buf),
            message=_UniffiFfiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiFfiConverterTypeLogForwardLevel.check_lower(value.level)
        _UniffiFfiConverterString.check_lower(value.target)
        _UniffiFfiConverterOptionalString.check_lower(value.file)
        _UniffiFfiConverterOptionalUInt32.check_lower(value.line)
        _UniffiFfiConverterString.check_lower(value.message)

    @staticmethod
    def write(value, buf):
        _UniffiFfiConverterTypeLogForwardLevel.write(value.level, buf)
        _UniffiFfiConverterString.write(value.target, buf)
        _UniffiFfiConverterOptionalString.write(value.file, buf)
        _UniffiFfiConverterOptionalUInt32.write(value.line, buf)
        _UniffiFfiConverterString.write(value.message, buf)

# The Duration type.
Duration = datetime.timedelta

# There is a loss of precision when converting from Rust durations,
# which are accurate to the nanosecond,
# to Python durations, which are only accurate to the microsecond.
class _UniffiFfiConverterDuration(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        seconds = buf.read_u64()
        microseconds = buf.read_u32() / 1.0e3
        return datetime.timedelta(seconds=seconds, microseconds=microseconds)

    @staticmethod
    def check_lower(value):
        seconds = value.seconds + value.days * 24 * 3600
        if seconds < 0:
            raise ValueError("Invalid duration, must be non-negative")

    @staticmethod
    def write(value, buf):
        seconds = value.seconds + value.days * 24 * 3600
        nanoseconds = value.microseconds * 1000
        buf.write_i64(seconds)
        buf.write_u32(nanoseconds)

class _UniffiFfiConverterOptionalDuration(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiFfiConverterDuration.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiFfiConverterDuration.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiFfiConverterDuration.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")

class _UniffiFfiConverterOptionalTypeVideoGrants(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiFfiConverterTypeVideoGrants.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiFfiConverterTypeVideoGrants.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiFfiConverterTypeVideoGrants.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")

class _UniffiFfiConverterOptionalTypeSIPGrants(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiFfiConverterTypeSIPGrants.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiFfiConverterTypeSIPGrants.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiFfiConverterTypeSIPGrants.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")

class _UniffiFfiConverterOptionalMapStringString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiFfiConverterMapStringString.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiFfiConverterMapStringString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiFfiConverterMapStringString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")

@dataclass
class TokenOptions:
    """
    Options used for generating an access token.

    Any fields left empty will use the token generator's defaults.

"""
    def __init__(self, *, ttl:typing.Optional[Duration] = None, video_grants:typing.Optional[VideoGrants] = None, sip_grants:typing.Optional[SipGrants] = None, identity:typing.Optional[str] = None, name:typing.Optional[str] = None, metadata:typing.Optional[str] = None, attributes:typing.Optional[dict[str, str]] = None, sha256:typing.Optional[str] = None, room_name:typing.Optional[str] = None):
        self.ttl = ttl
        self.video_grants = video_grants
        self.sip_grants = sip_grants
        self.identity = identity
        self.name = name
        self.metadata = metadata
        self.attributes = attributes
        self.sha256 = sha256
        self.room_name = room_name
        
        

    
    def __str__(self):
        return "TokenOptions(ttl={}, video_grants={}, sip_grants={}, identity={}, name={}, metadata={}, attributes={}, sha256={}, room_name={})".format(self.ttl, self.video_grants, self.sip_grants, self.identity, self.name, self.metadata, self.attributes, self.sha256, self.room_name)
    def __eq__(self, other):
        if self.ttl != other.ttl:
            return False
        if self.video_grants != other.video_grants:
            return False
        if self.sip_grants != other.sip_grants:
            return False
        if self.identity != other.identity:
            return False
        if self.name != other.name:
            return False
        if self.metadata != other.metadata:
            return False
        if self.attributes != other.attributes:
            return False
        if self.sha256 != other.sha256:
            return False
        if self.room_name != other.room_name:
            return False
        return True

class _UniffiFfiConverterTypeTokenOptions(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return TokenOptions(
            ttl=_UniffiFfiConverterOptionalDuration.read(buf),
            video_grants=_UniffiFfiConverterOptionalTypeVideoGrants.read(buf),
            sip_grants=_UniffiFfiConverterOptionalTypeSIPGrants.read(buf),
            identity=_UniffiFfiConverterOptionalString.read(buf),
            name=_UniffiFfiConverterOptionalString.read(buf),
            metadata=_UniffiFfiConverterOptionalString.read(buf),
            attributes=_UniffiFfiConverterOptionalMapStringString.read(buf),
            sha256=_UniffiFfiConverterOptionalString.read(buf),
            room_name=_UniffiFfiConverterOptionalString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiFfiConverterOptionalDuration.check_lower(value.ttl)
        _UniffiFfiConverterOptionalTypeVideoGrants.check_lower(value.video_grants)
        _UniffiFfiConverterOptionalTypeSIPGrants.check_lower(value.sip_grants)
        _UniffiFfiConverterOptionalString.check_lower(value.identity)
        _UniffiFfiConverterOptionalString.check_lower(value.name)
        _UniffiFfiConverterOptionalString.check_lower(value.metadata)
        _UniffiFfiConverterOptionalMapStringString.check_lower(value.attributes)
        _UniffiFfiConverterOptionalString.check_lower(value.sha256)
        _UniffiFfiConverterOptionalString.check_lower(value.room_name)

    @staticmethod
    def write(value, buf):
        _UniffiFfiConverterOptionalDuration.write(value.ttl, buf)
        _UniffiFfiConverterOptionalTypeVideoGrants.write(value.video_grants, buf)
        _UniffiFfiConverterOptionalTypeSIPGrants.write(value.sip_grants, buf)
        _UniffiFfiConverterOptionalString.write(value.identity, buf)
        _UniffiFfiConverterOptionalString.write(value.name, buf)
        _UniffiFfiConverterOptionalString.write(value.metadata, buf)
        _UniffiFfiConverterOptionalMapStringString.write(value.attributes, buf)
        _UniffiFfiConverterOptionalString.write(value.sha256, buf)
        _UniffiFfiConverterOptionalString.write(value.room_name, buf)



# AccessTokenError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class AccessTokenError(Exception):
    """
    An error that can occur during token generation or verification.
"""
    pass

_UniffiTempAccessTokenError = AccessTokenError

class AccessTokenError:  # type: ignore
    """
    An error that can occur during token generation or verification.
"""
    
    class InvalidKeys(_UniffiTempAccessTokenError):
        def __repr__(self):
            return "AccessTokenError.InvalidKeys({})".format(repr(str(self)))
    _UniffiTempAccessTokenError.InvalidKeys = InvalidKeys # type: ignore
    class InvalidEnv(_UniffiTempAccessTokenError):
        def __repr__(self):
            return "AccessTokenError.InvalidEnv({})".format(repr(str(self)))
    _UniffiTempAccessTokenError.InvalidEnv = InvalidEnv # type: ignore
    class InvalidClaims(_UniffiTempAccessTokenError):
        def __repr__(self):
            return "AccessTokenError.InvalidClaims({})".format(repr(str(self)))
    _UniffiTempAccessTokenError.InvalidClaims = InvalidClaims # type: ignore
    class Encoding(_UniffiTempAccessTokenError):
        def __repr__(self):
            return "AccessTokenError.Encoding({})".format(repr(str(self)))
    _UniffiTempAccessTokenError.Encoding = Encoding # type: ignore

AccessTokenError = _UniffiTempAccessTokenError # type: ignore
del _UniffiTempAccessTokenError


class _UniffiFfiConverterTypeAccessTokenError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return AccessTokenError.InvalidKeys(
                _UniffiFfiConverterString.read(buf),
            )
        if variant == 2:
            return AccessTokenError.InvalidEnv(
                _UniffiFfiConverterString.read(buf),
            )
        if variant == 3:
            return AccessTokenError.InvalidClaims(
                _UniffiFfiConverterString.read(buf),
            )
        if variant == 4:
            return AccessTokenError.Encoding(
                _UniffiFfiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, AccessTokenError.InvalidKeys):
            return
        if isinstance(value, AccessTokenError.InvalidEnv):
            return
        if isinstance(value, AccessTokenError.InvalidClaims):
            return
        if isinstance(value, AccessTokenError.Encoding):
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, AccessTokenError.InvalidKeys):
            buf.write_i32(1)
        if isinstance(value, AccessTokenError.InvalidEnv):
            buf.write_i32(2)
        if isinstance(value, AccessTokenError.InvalidClaims):
            buf.write_i32(3)
        if isinstance(value, AccessTokenError.Encoding):
            buf.write_i32(4)






class LogForwardFilter(enum.Enum):
    
    OFF = 0
    
    ERROR = 1
    
    WARN = 2
    
    INFO = 3
    
    DEBUG = 4
    
    TRACE = 5
    


class _UniffiFfiConverterTypeLogForwardFilter(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return LogForwardFilter.OFF
        if variant == 2:
            return LogForwardFilter.ERROR
        if variant == 3:
            return LogForwardFilter.WARN
        if variant == 4:
            return LogForwardFilter.INFO
        if variant == 5:
            return LogForwardFilter.DEBUG
        if variant == 6:
            return LogForwardFilter.TRACE
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == LogForwardFilter.OFF:
            return
        if value == LogForwardFilter.ERROR:
            return
        if value == LogForwardFilter.WARN:
            return
        if value == LogForwardFilter.INFO:
            return
        if value == LogForwardFilter.DEBUG:
            return
        if value == LogForwardFilter.TRACE:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == LogForwardFilter.OFF:
            buf.write_i32(1)
        if value == LogForwardFilter.ERROR:
            buf.write_i32(2)
        if value == LogForwardFilter.WARN:
            buf.write_i32(3)
        if value == LogForwardFilter.INFO:
            buf.write_i32(4)
        if value == LogForwardFilter.DEBUG:
            buf.write_i32(5)
        if value == LogForwardFilter.TRACE:
            buf.write_i32(6)



class _UniffiFfiConverterOptionalTypeApiCredentials(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiFfiConverterTypeApiCredentials.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiFfiConverterTypeApiCredentials.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiFfiConverterTypeApiCredentials.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")

class _UniffiFfiConverterOptionalTypeLogForwardEntry(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiFfiConverterTypeLogForwardEntry.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiFfiConverterTypeLogForwardEntry.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiFfiConverterTypeLogForwardEntry.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")

class _UniffiFfiConverterUInt8(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u8"
    VALUE_MIN = 0
    VALUE_MAX = 2**8

    @staticmethod
    def read(buf):
        return buf.read_u8()

    @staticmethod
    def write(value, buf):
        buf.write_u8(value)
def build_version() -> str:
    """
    Returns the version specified in the crate's Cargo.toml.
"""
    _uniffi_lowered_args = (
    )
    _uniffi_lift_return = _UniffiFfiConverterString.lift
    _uniffi_error_converter = None
    _uniffi_ffi_result = _uniffi_rust_call_with_error(
        _uniffi_error_converter,
        _UniffiLib.uniffi_livekit_uniffi_fn_func_build_version,
        *_uniffi_lowered_args,
    )
    return _uniffi_lift_return(_uniffi_ffi_result)
def generate_token(options: TokenOptions,credentials: typing.Optional[ApiCredentials]) -> str:
    """
    Generates an access token.

    If `credentials` are omitted, API key and secret will be read from the environment
    variables `LIVEKIT_API_KEY` and `LIVEKIT_SECRET` respectively.

"""
    
    _UniffiFfiConverterTypeTokenOptions.check_lower(options)
    
    _UniffiFfiConverterOptionalTypeApiCredentials.check_lower(credentials)
    _uniffi_lowered_args = (
        _UniffiFfiConverterTypeTokenOptions.lower(options),
        _UniffiFfiConverterOptionalTypeApiCredentials.lower(credentials),
    )
    _uniffi_lift_return = _UniffiFfiConverterString.lift
    _uniffi_error_converter = _UniffiFfiConverterTypeAccessTokenError
    _uniffi_ffi_result = _uniffi_rust_call_with_error(
        _uniffi_error_converter,
        _UniffiLib.uniffi_livekit_uniffi_fn_func_generate_token,
        *_uniffi_lowered_args,
    )
    return _uniffi_lift_return(_uniffi_ffi_result)
def log_forward_bootstrap(level: LogForwardFilter) -> None:
    """
    Bootstraps log forwarding.

    Generally, you will invoke this once early in program execution. However,
    subsequent invocations are allowed to change the log level.

"""
    
    _UniffiFfiConverterTypeLogForwardFilter.check_lower(level)
    _uniffi_lowered_args = (
        _UniffiFfiConverterTypeLogForwardFilter.lower(level),
    )
    _uniffi_lift_return = lambda val: None
    _uniffi_error_converter = None
    _uniffi_ffi_result = _uniffi_rust_call_with_error(
        _uniffi_error_converter,
        _UniffiLib.uniffi_livekit_uniffi_fn_func_log_forward_bootstrap,
        *_uniffi_lowered_args,
    )
    return _uniffi_lift_return(_uniffi_ffi_result)
async def log_forward_receive() -> typing.Optional[LogForwardEntry]:
    """
    Asynchronously receives a forwarded log entry.

    Invoke repeatedly to receive log entries as they are produced
    until `None` is returned, indicating forwarding has ended. Clients will
    likely want to bridge this to the languages's equivalent of an asynchronous stream.

"""
    _uniffi_lowered_args = (
    )
    _uniffi_lift_return = _UniffiFfiConverterOptionalTypeLogForwardEntry.lift
    _uniffi_error_converter = None
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_livekit_uniffi_fn_func_log_forward_receive(*_uniffi_lowered_args),
        _UniffiLib.ffi_livekit_uniffi_rust_future_poll_rust_buffer,
        _UniffiLib.ffi_livekit_uniffi_rust_future_complete_rust_buffer,
        _UniffiLib.ffi_livekit_uniffi_rust_future_free_rust_buffer,
        _uniffi_lift_return,
        _uniffi_error_converter,
    )
def verify_token(token: str,credentials: typing.Optional[ApiCredentials]) -> Claims:
    """
    Verifies an access token.

    If `credentials` are omitted, API key and secret will be read from the environment
    variables `LIVEKIT_API_KEY` and `LIVEKIT_SECRET` respectively.

"""
    
    _UniffiFfiConverterString.check_lower(token)
    
    _UniffiFfiConverterOptionalTypeApiCredentials.check_lower(credentials)
    _uniffi_lowered_args = (
        _UniffiFfiConverterString.lower(token),
        _UniffiFfiConverterOptionalTypeApiCredentials.lower(credentials),
    )
    _uniffi_lift_return = _UniffiFfiConverterTypeClaims.lift
    _uniffi_error_converter = _UniffiFfiConverterTypeAccessTokenError
    _uniffi_ffi_result = _uniffi_rust_call_with_error(
        _uniffi_error_converter,
        _UniffiLib.uniffi_livekit_uniffi_fn_func_verify_token,
        *_uniffi_lowered_args,
    )
    return _uniffi_lift_return(_uniffi_ffi_result)

__all__ = [
    "InternalError",
    "LogForwardLevel",
    "AccessTokenError",
    "LogForwardFilter",
    "ApiCredentials",
    "VideoGrants",
    "SipGrants",
    "Claims",
    "LogForwardEntry",
    "TokenOptions",
    "build_version",
    "generate_token",
    "log_forward_bootstrap",
    "log_forward_receive",
    "verify_token",
]